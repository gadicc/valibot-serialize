name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Argh, there's a Copilot limitation that doesn't allow for this workflow,
      # without publishing to it's own repo, so, let's not do that.
      #- uses: ./.github/actions/setup

      # And instead, just copy and paste the contents here and remember to keep
      # it up to date *sigh*.
      # -----------------------------------------------------------------------------
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: true

      - name: Install dependencies
        run: deno install
        shell: bash

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          # No 'cache' here, since now project lockfile for npm
          # We'll handle this manually.

      # Cache npm's global/content-addressable cache
      - uses: actions/cache@v4
        with:
          path: ~/.npm/_cacache
          key: npm-cache-${{ runner.os }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            npm-cache-${{ runner.os }}-

      # And for npx
      - uses: actions/cache@v4
        with:
          path: ~/.npm/_npx
          key: npx-cache-${{ runner.os }}
      # -----------------------------------------------------------------------------
