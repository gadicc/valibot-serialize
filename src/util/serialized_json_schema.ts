/**
 * JSON Schema (Draft 2020-12) for the `SerializedSchema` envelope and AST.
 *
 * Useful for validation, documentation, and tooling interoperability.
 */
export const serializedSchemaJson = {
  $schema: "https://json-schema.org/draft/2020-12/schema",
  $id: "https://example.com/valibot-serialized.schema.json",
  type: "object",
  additionalProperties: false,
  required: ["kind", "vendor", "version", "format", "node"],
  properties: {
    kind: { const: "schema" },
    vendor: { const: "valibot" },
    version: { const: 1 },
    format: { type: "integer", const: 1 },
    node: { $ref: "#/$defs/SchemaNode" },
  },
  $defs: {
    PrimitiveLiteral: {
      anyOf: [
        { type: "string" },
        { type: "number" },
        { type: "boolean" },
        { type: "null" },
      ],
    },
    SchemaNode: {
      oneOf: [
        { $ref: "#/$defs/StringNode" },
        { $ref: "#/$defs/NumberNode" },
        { $ref: "#/$defs/BooleanNode" },
        { $ref: "#/$defs/LiteralNode" },
        { $ref: "#/$defs/ArrayNode" },
        { $ref: "#/$defs/ObjectNode" },
        { $ref: "#/$defs/OptionalNode" },
        { $ref: "#/$defs/NullableNode" },
        { $ref: "#/$defs/NullishNode" },
        { $ref: "#/$defs/UnionNode" },
        { $ref: "#/$defs/TupleNode" },
        { $ref: "#/$defs/RecordNode" },
        { $ref: "#/$defs/EnumNode" },
        { $ref: "#/$defs/PicklistNode" },
        { $ref: "#/$defs/SetNode" },
        { $ref: "#/$defs/MapNode" },
        { $ref: "#/$defs/DateNode" },
        { $ref: "#/$defs/FileNode" },
        { $ref: "#/$defs/BlobNode" },
      ],
    },
    StringNode: {
      type: "object",
      additionalProperties: false,
      required: ["type"],
      properties: {
        type: { const: "string" },
        minLength: { type: "number" },
        maxLength: { type: "number" },
        length: { type: "number" },
        pattern: { type: "string" },
        patternFlags: { type: "string" },
        email: { const: true },
        rfcEmail: { const: true },
        url: { const: true },
        uuid: { const: true },
        ip: { const: true },
        ipv4: { const: true },
        ipv6: { const: true },
        hexColor: { const: true },
        slug: { const: true },
        creditCard: { const: true },
        imei: { const: true },
        mac: { const: true },
        mac48: { const: true },
        mac64: { const: true },
        base64: { const: true },
        ulid: { const: true },
        nanoid: { const: true },
        cuid2: { const: true },
        isoDate: { const: true },
        isoDateTime: { const: true },
        isoTime: { const: true },
        isoTimeSecond: { const: true },
        isoTimestamp: { const: true },
        isoWeek: { const: true },
        digits: { const: true },
        emoji: { const: true },
        hexadecimal: { const: true },
        minGraphemes: { type: "number" },
        maxGraphemes: { type: "number" },
        startsWith: { type: "string" },
        endsWith: { type: "string" },
        transforms: {
          type: "array",
          items: {
            enum: [
              "trim",
              "trimStart",
              "trimEnd",
              "toUpperCase",
              "toLowerCase",
              "normalize",
            ],
          },
        },
      },
    },
    NumberNode: {
      type: "object",
      additionalProperties: false,
      required: ["type"],
      properties: {
        type: { const: "number" },
        min: { type: "number" },
        max: { type: "number" },
        gt: { type: "number" },
        lt: { type: "number" },
        integer: { const: true },
        safeInteger: { const: true },
        multipleOf: { type: "number" },
        finite: { const: true },
      },
    },
    BooleanNode: {
      type: "object",
      additionalProperties: false,
      required: ["type"],
      properties: { type: { const: "boolean" } },
    },
    DateNode: {
      type: "object",
      additionalProperties: false,
      required: ["type"],
      properties: { type: { const: "date" } },
    },
    FileNode: {
      type: "object",
      additionalProperties: false,
      required: ["type"],
      properties: {
        type: { const: "file" },
        minSize: { type: "number" },
        maxSize: { type: "number" },
        mimeTypes: { type: "array", items: { type: "string" } },
      },
    },
    BlobNode: {
      type: "object",
      additionalProperties: false,
      required: ["type"],
      properties: {
        type: { const: "blob" },
        minSize: { type: "number" },
        maxSize: { type: "number" },
        mimeTypes: { type: "array", items: { type: "string" } },
      },
    },
    LiteralNode: {
      type: "object",
      additionalProperties: false,
      required: ["type", "value"],
      properties: {
        type: { const: "literal" },
        value: { $ref: "#/$defs/PrimitiveLiteral" },
      },
    },
    ArrayNode: {
      type: "object",
      additionalProperties: false,
      required: ["type", "item"],
      properties: {
        type: { const: "array" },
        item: { $ref: "#/$defs/SchemaNode" },
        minLength: { type: "number" },
        maxLength: { type: "number" },
        length: { type: "number" },
      },
    },
    ObjectNode: {
      type: "object",
      additionalProperties: false,
      required: ["type", "entries"],
      properties: {
        type: { const: "object" },
        entries: {
          type: "object",
          additionalProperties: { $ref: "#/$defs/SchemaNode" },
        },
        optionalKeys: { type: "array", items: { type: "string" } },
        policy: { enum: ["loose", "strict"] },
        rest: { $ref: "#/$defs/SchemaNode" },
      },
    },
    OptionalNode: {
      type: "object",
      additionalProperties: false,
      required: ["type", "base"],
      properties: {
        type: { const: "optional" },
        base: { $ref: "#/$defs/SchemaNode" },
      },
    },
    NullableNode: {
      type: "object",
      additionalProperties: false,
      required: ["type", "base"],
      properties: {
        type: { const: "nullable" },
        base: { $ref: "#/$defs/SchemaNode" },
      },
    },
    NullishNode: {
      type: "object",
      additionalProperties: false,
      required: ["type", "base"],
      properties: {
        type: { const: "nullish" },
        base: { $ref: "#/$defs/SchemaNode" },
      },
    },
    UnionNode: {
      type: "object",
      additionalProperties: false,
      required: ["type", "options"],
      properties: {
        type: { const: "union" },
        options: { type: "array", items: { $ref: "#/$defs/SchemaNode" } },
      },
    },
    TupleNode: {
      type: "object",
      additionalProperties: false,
      required: ["type", "items"],
      properties: {
        type: { const: "tuple" },
        items: { type: "array", items: { $ref: "#/$defs/SchemaNode" } },
        rest: { $ref: "#/$defs/SchemaNode" },
      },
    },
    RecordNode: {
      type: "object",
      additionalProperties: false,
      required: ["type", "key", "value"],
      properties: {
        type: { const: "record" },
        key: { $ref: "#/$defs/SchemaNode" },
        value: { $ref: "#/$defs/SchemaNode" },
      },
    },
    EnumNode: {
      type: "object",
      additionalProperties: false,
      required: ["type", "values"],
      properties: {
        type: { const: "enum" },
        values: { type: "array", items: { $ref: "#/$defs/PrimitiveLiteral" } },
      },
    },
    PicklistNode: {
      type: "object",
      additionalProperties: false,
      required: ["type", "values"],
      properties: {
        type: { const: "picklist" },
        values: { type: "array", items: { type: "string" } },
      },
    },
    SetNode: {
      type: "object",
      additionalProperties: false,
      required: ["type", "value"],
      properties: {
        type: { const: "set" },
        value: { $ref: "#/$defs/SchemaNode" },
        minSize: { type: "number" },
        maxSize: { type: "number" },
      },
    },
    MapNode: {
      type: "object",
      additionalProperties: false,
      required: ["type", "key", "value"],
      properties: {
        type: { const: "map" },
        key: { $ref: "#/$defs/SchemaNode" },
        value: { $ref: "#/$defs/SchemaNode" },
        minSize: { type: "number" },
        maxSize: { type: "number" },
      },
    },
  },
} as const;

/**
 * Structural type of {@link serializedSchemaJson} for convenience.
 */
export type SerializedJsonSchema = typeof serializedSchemaJson;
